const axios = require('axios');

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è API - –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ–∫—Å–∏-—Å–µ—Ä–≤–µ—Ä RoyaleAPI
const CLASH_ROYALE_API_TOKEN = process.env.CLASH_ROYALE_API_TOKEN;
const API_BASE_URL = 'https://proxy.royaleapi.dev/v1';

exports.handler = async (event, context) => {
    // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
    console.log('üîç API Function –≤—ã–∑–≤–∞–Ω–∞');
    console.log('üìù Token present:', !!process.env.CLASH_ROYALE_API_TOKEN);
    console.log('üåê Request path:', event.path);
    console.log('üîó Using proxy:', API_BASE_URL);
    
    // CORS –∑–∞–≥–æ–ª–æ–≤–∫–∏
    const headers = {
        'Access-Control-Allow-Origin': '*',
        'Access-Control-Allow-Headers': 'Content-Type',
        'Access-Control-Allow-Methods': 'GET, POST, OPTIONS'
    };

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ preflight –∑–∞–ø—Ä–æ—Å–æ–≤
    if (event.httpMethod === 'OPTIONS') {
        return {
            statusCode: 200,
            headers,
            body: ''
        };
    }

    try {
        const path = event.path.replace('/.netlify/functions/api', '');
        const url = `${API_BASE_URL}${path}`;
        
        console.log(`–ó–∞–ø—Ä–æ—Å –∫ –ø—Ä–æ–∫—Å–∏ API: ${url}`);
        
        const response = await axios.get(url, {
            headers: {
                'Authorization': `Bearer ${CLASH_ROYALE_API_TOKEN}`,
                'Content-Type': 'application/json'
            }
        });
        
        return {
            statusCode: 200,
            headers: {
                ...headers,
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(response.data)
        };
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ API:', error.response?.status, error.response?.data);
        
        let statusCode = 500;
        let message = '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞';
        
        if (error.response?.status === 404) {
            statusCode = 404;
            message = '–ò–≥—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å —Ç–µ–≥–∞.';
        } else if (error.response?.status === 403) {
            statusCode = 403;
            message = '–û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ API. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ API –∫–ª—é—á –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.';
        } else if (error.response?.status === 429) {
            statusCode = 429;
            message = '–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ API. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.';
        }
        
        return {
            statusCode,
            headers: {
                ...headers,
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                error: true,
                message
            })
        };
    }
};
