// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è FACEIT API
const FACEIT_API_BASE = 'https://open.faceit.com/data/v4';
const FACEIT_API_KEY = '73782652-2cd5-405b-9c98-d28b2620bd0c';

// –î–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–æ–≤
let playersList = [];
let filteredPlayers = [];
let currentFilter = 'all';

// faceit-ranking-script.js

// 1) –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞
const supabase = window.supabase.createClient(
  window.SUPABASE_URL,
  window.SUPABASE_ANON_KEY
);

// 2) –ü–æ–ª—É—á–∞–µ–º –æ–±—â–∏–π —Ä–µ–π—Ç–∏–Ω–≥ –∏–∑ –ë–î
async function fetchGlobalRating() {
  const { data, error } = await supabase
    .from('settings')
    .select('value')
    .eq('key', 'faceit_rating')
    .single();

  if (error) {
    console.error('Failed to load rating:', error);
    // –∑–∞–ø–∞—Å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ, –µ—Å–ª–∏ –ë–î –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞
    return 1500;
  }
  const val = parseInt(data?.value, 10);
  return Number.isFinite(val) ? val : 1500;
}

// 3) –ü—Ä–∏–º–µ–Ω—è–µ–º —Ä–µ–π—Ç–∏–Ω–≥ –∫–æ –≤—Å–µ–º –∏–≥—Ä–æ–∫–∞–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
async function applyGlobalRating() {
  const rating = await fetchGlobalRating();

  // –ù–∞–π–¥–∏ —ç–ª–µ–º–µ–Ω—Ç—ã, –≥–¥–µ –¥–æ–ª–∂–µ–Ω –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è —Ä–µ–π—Ç–∏–Ω–≥.
  // –ü—Ä–∏–º–µ—Ä: —É –∫–∞–∂–¥–æ–≥–æ –∏–≥—Ä–æ–∫–∞ –µ—Å—Ç—å span —Å –∫–ª–∞—Å—Å–æ–º .player-rating
  const ratingEls = document.querySelectorAll('.player-rating');
  ratingEls.forEach(el => {
    el.textContent = rating;
    el.setAttribute('aria-label', `FACEIT —Ä–µ–π—Ç–∏–Ω–≥: ${rating}`);
  });
}

// 4) –ó–∞–ø—É—Å–∫
document.addEventListener('DOMContentLoaded', applyGlobalRating);


// –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
let currentSortField = 'elo';
let currentSortDirection = 'desc'; // desc - –ø–æ —É–±—ã–≤–∞–Ω–∏—é, asc - –ø–æ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—é

// –ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤
function loadPlayersList() {
    console.log('üìÇ –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤ –∏–∑ localStorage');
    const saved = localStorage.getItem('faceitPlayers');
    if (saved) {
        playersList = JSON.parse(saved);
        console.log('‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ –∏–≥—Ä–æ–∫–æ–≤ –∏–∑ localStorage:', playersList.length);
        console.log('üìã –°–ø–∏—Å–æ–∫ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤:', playersList);
    } else {
        console.log('‚ö†Ô∏è –í localStorage –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤');
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    updateStatsDisplay();
    
    console.log('‚úÖ –ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ –∏–≥—Ä–æ–∫–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
}

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∏–≥—Ä–æ–∫–æ–≤
function savePlayersList() {
    console.log('üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤ –≤ localStorage:', playersList);
    localStorage.setItem('faceitPlayers', JSON.stringify(playersList));
    console.log('‚úÖ –°–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤ —Å–æ—Ö—Ä–∞–Ω–µ–Ω');
    console.log('üíæ –î–∞–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∞–Ω—ã –≤ localStorage');
}

// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∏–≥—Ä–æ–∫–∞
async function addPlayer(nickname, group = '') {
    if (!nickname.trim()) {
        showNotification('–í–≤–µ–¥–∏—Ç–µ –Ω–∏–∫–Ω–µ–π–º –∏–≥—Ä–æ–∫–∞', 'error');
        return;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω –ª–∏ —É–∂–µ —ç—Ç–æ—Ç –∏–≥—Ä–æ–∫
    if (playersList.some(player => player.nickname.toLowerCase() === nickname.toLowerCase())) {
        showNotification('–≠—Ç–æ—Ç –∏–≥—Ä–æ–∫ —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω', 'warning');
        return;
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –∏–≥—Ä–æ–∫–∞ –≤ —Å–ø–∏—Å–æ–∫
    const newPlayer = {
        nickname: nickname.trim(),
        group: group,
        addedAt: new Date().toISOString(),
        lastUpdated: null,
        stats: null
    };

    console.log('‚ûï –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–≥–æ –∏–≥—Ä–æ–∫–∞:', newPlayer);
    playersList.push(newPlayer);
    savePlayersList();
    
    const groupText = group ? ` (–≥—Ä—É–ø–ø–∞: ${getGroupDisplayName(group)})` : '';
    showNotification(`–ò–≥—Ä–æ–∫ ${nickname} –¥–æ–±–∞–≤–ª–µ–Ω${groupText}`, 'success');
    
    console.log('üìã –°–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤ –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è:', playersList);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    updatePlayersListDisplay();
    loadRankingData();
    
    console.log('üîÑ –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏ –¥–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã –¥–ª—è addPlayer');
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è –≥—Ä—É–ø–ø—ã
function getGroupDisplayName(group) {
    const displayName = (() => {
        switch (group) {
            case 'music': return '–ú—É–∑—ã–∫–∞';
            case 'black': return '–ß–µ—Ä–Ω—ã–µ';
            default: return '–ë–µ–∑ –≥—Ä—É–ø–ø—ã';
        }
    })();
    
    console.log(`üè∑Ô∏è –ù–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã "${group}" -> "${displayName}"`);
    return displayName;
}

// –£–¥–∞–ª–µ–Ω–∏–µ –∏–≥—Ä–æ–∫–∞
function removePlayer(nickname) {
    console.log(`üóëÔ∏è –£–¥–∞–ª—è–µ–º –∏–≥—Ä–æ–∫–∞: ${nickname}`);
    
    playersList = playersList.filter(player => player.nickname !== nickname);
    console.log(`üìã –°–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤ –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è:`, playersList);
    
    savePlayersList();
    
    showNotification(`–ò–≥—Ä–æ–∫ ${nickname} —É–¥–∞–ª–µ–Ω`, 'success');
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    updatePlayersListDisplay();
    loadRankingData();
    
    console.log('üîÑ –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏ –¥–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã –¥–ª—è removePlayer');
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∏–≥—Ä–æ–∫–æ–≤ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö
function updatePlayersListDisplay() {
    console.log('üîÑ –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∏–≥—Ä–æ–∫–æ–≤ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö');
    console.log('üìã –¢–µ–∫—É—â–∏–π —Å–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤:', playersList);
    
    const container = document.getElementById('players-list-container');
    
    if (playersList.length === 0) {
        console.log('üì≠ –°–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤ –ø—É—Å—Ç, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ');
        container.innerHTML = '<p style="color: var(--text-secondary); text-align: center;">–ù–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤</p>';
        return;
    }

    console.log(`üìù –û—Ç–æ–±—Ä–∞–∂–∞–µ–º ${playersList.length} –∏–≥—Ä–æ–∫–æ–≤ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö`);
    
    container.innerHTML = playersList.map(player => `
        <div class="player-item">
            <div class="player-item-info">
                <div class="player-item-avatar">
                    ${player.nickname.charAt(0).toUpperCase()}
                </div>
                <div class="player-item-details">
                    <span class="player-item-name">${player.nickname}</span>
                    ${player.group ? `<span class="player-item-group group-${player.group}">${getGroupDisplayName(player.group)}</span>` : ''}
                </div>
            </div>
            <div class="player-item-actions">
                <button class="edit-group-btn" onclick="editPlayerGroup('${player.nickname}')" title="–ò–∑–º–µ–Ω–∏—Ç—å –≥—Ä—É–ø–ø—É">
                    <i class="fas fa-edit"></i>
                </button>
                <button class="remove-player-btn" onclick="removePlayer('${player.nickname}')" title="–£–¥–∞–ª–∏—Ç—å –∏–≥—Ä–æ–∫–∞">
                    <i class="fas fa-trash"></i>
                </button>
            </div>
        </div>
    `).join('');
    
    console.log('‚úÖ –°–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –æ–±–Ω–æ–≤–ª–µ–Ω');
    console.log('üìã HTML –æ–±–Ω–æ–≤–ª–µ–Ω –¥–ª—è', playersList.length, '–∏–≥—Ä–æ–∫–æ–≤');
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≥—Ä—É–ø–ø—ã –∏–≥—Ä–æ–∫–∞
function editPlayerGroup(nickname) {
    console.log(`‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –≥—Ä—É–ø–ø—É –¥–ª—è –∏–≥—Ä–æ–∫–∞: ${nickname}`);
    
    const player = playersList.find(p => p.nickname === nickname);
    if (!player) {
        console.log('‚ùå –ò–≥—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω:', nickname);
        return;
    }
    
    console.log('üë§ –ù–∞–π–¥–µ–Ω –∏–≥—Ä–æ–∫ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', player);
    
    // –°–æ–∑–¥–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è –≤—ã–±–æ—Ä–∞ –≥—Ä—É–ø–ø—ã
    const groupModal = document.createElement('div');
    groupModal.className = 'modal active';
    groupModal.innerHTML = `
        <div class="modal-content">
            <div class="modal-header">
                <h3>–ò–∑–º–µ–Ω–∏—Ç—å –≥—Ä—É–ø–ø—É –¥–ª—è ${nickname}</h3>
                <button class="modal-close" onclick="this.closest('.modal').remove()">&times;</button>
            </div>
            <div class="modal-body">
                <div class="group-selector">
                    <label for="edit-player-group">–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É:</label>
                    <select id="edit-player-group" class="group-select">
                        <option value="" ${!player.group ? 'selected' : ''}>–ë–µ–∑ –≥—Ä—É–ø–ø—ã</option>
                        <option value="music" ${player.group === 'music' ? 'selected' : ''}>üéµ –ú—É–∑—ã–∫–∞</option>
                        <option value="black" ${player.group === 'black' ? 'selected' : ''}>‚ö´ –ß–µ—Ä–Ω—ã–µ</option>
                    </select>
                </div>
            </div>
            <div class="modal-footer">
                <button class="btn btn-secondary" onclick="this.closest('.modal').remove()">–û—Ç–º–µ–Ω–∞</button>
                <button class="btn btn-primary" onclick="savePlayerGroup('${nickname}', this.closest('.modal'))">–°–æ—Ö—Ä–∞–Ω–∏—Ç—å</button>
            </div>
        </div>
    `;
    
    document.body.appendChild(groupModal);
    
    console.log('‚úÖ –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≥—Ä—É–ø–ø—ã —Å–æ–∑–¥–∞–Ω–æ');
    console.log('üìã –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ DOM');
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≥—Ä—É–ø–ø—ã –∏–≥—Ä–æ–∫–∞
function savePlayerGroup(nickname, modal) {
    console.log(`üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º –≥—Ä—É–ø–ø—É –¥–ª—è –∏–≥—Ä–æ–∫–∞: ${nickname}`);
    
    const player = playersList.find(p => p.nickname === nickname);
    if (!player) {
        console.log('‚ùå –ò–≥—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω:', nickname);
        return;
    }
    
    const groupSelect = document.getElementById('edit-player-group');
    const selectedGroup = groupSelect.value;
    
    console.log(`üè∑Ô∏è –í—ã–±—Ä–∞–Ω–Ω–∞—è –≥—Ä—É–ø–ø–∞: "${selectedGroup}"`);
    console.log(`üë§ –ò–≥—Ä–æ–∫ –¥–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è:`, player);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –≥—Ä—É–ø–ø—É –∏–≥—Ä–æ–∫–∞
    player.group = selectedGroup;
    console.log(`üë§ –ò–≥—Ä–æ–∫ –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è:`, player);
    
    savePlayersList();
    
    const groupText = selectedGroup ? ` (–≥—Ä—É–ø–ø–∞: ${getGroupDisplayName(selectedGroup)})` : ' (–±–µ–∑ –≥—Ä—É–ø–ø—ã)';
    showNotification(`–ì—Ä—É–ø–ø–∞ –∏–≥—Ä–æ–∫–∞ ${nickname} –∏–∑–º–µ–Ω–µ–Ω–∞${groupText}`, 'success');
    
    // –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
    modal.remove();
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    updatePlayersListDisplay();
    loadRankingData();
    
    console.log('‚úÖ –ì—Ä—É–ø–ø–∞ –∏–≥—Ä–æ–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞');
    console.log('üîÑ –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏ –¥–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã');
}

// FACEIT API —Ñ—É–Ω–∫—Ü–∏–∏
async function getPlayerStats(nickname) {
    try {
        console.log('üîç –ó–∞–ø—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∏–≥—Ä–æ–∫–∞:', nickname);
        console.log('üîë API –∫–ª—é—á –Ω–∞—Å—Ç—Ä–æ–µ–Ω:', !!FACEIT_API_KEY && FACEIT_API_KEY !== 'YOUR_API_KEY_HERE');
        
        if (!FACEIT_API_KEY || FACEIT_API_KEY === 'YOUR_API_KEY_HERE') {
            console.log('‚ùå API –∫–ª—é—á –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω, –¥–∞–Ω–Ω—ã–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã');
            return null;
        }
        
        // –°–Ω–∞—á–∞–ª–∞ –ø–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –∏–≥—Ä–æ–∫–∞ —á–µ—Ä–µ–∑ –ø–æ–∏—Å–∫
        const searchUrl = `${FACEIT_API_BASE}/search/players?nickname=${encodeURIComponent(nickname)}&game=cs2&offset=0&limit=1`;
        console.log('üîç –ü–æ–∏—Å–∫ –∏–≥—Ä–æ–∫–∞:', searchUrl);
        
        const searchResponse = await fetch(searchUrl, {
            method: 'GET',
            headers: {
                'Authorization': `Bearer ${FACEIT_API_KEY}`,
                'Content-Type': 'application/json',
                'Accept': 'application/json'
            },
            mode: 'cors'
        });
        
        console.log('üì° –°—Ç–∞—Ç—É—Å –ø–æ–∏—Å–∫–∞:', searchResponse.status);
        
        let playerData;
        if (searchResponse.ok) {
            const searchData = await searchResponse.json();
            console.log('üîç –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞:', searchData);
            
            if (searchData.items && searchData.items.length > 0) {
                playerData = searchData.items[0];
                console.log('‚úÖ –ò–≥—Ä–æ–∫ –Ω–∞–π–¥–µ–Ω —á–µ—Ä–µ–∑ –ø–æ–∏—Å–∫:', playerData);
            } else {
                throw new Error('–ò–≥—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–æ–∏—Å–∫–µ');
            }
        } else {
            // –ï—Å–ª–∏ –ø–æ–∏—Å–∫ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –ø—Ä–æ–±—É–µ–º –ø—Ä—è–º–æ–π –∑–∞–ø—Ä–æ—Å
            const playerUrl = `${FACEIT_API_BASE}/players/${nickname}`;
            console.log('üåê –ü—Ä—è–º–æ–π –∑–∞–ø—Ä–æ—Å –∫:', playerUrl);
            
            const response = await fetch(playerUrl, {
                method: 'GET',
                headers: {
                    'Authorization': `Bearer ${FACEIT_API_KEY}`,
                    'Content-Type': 'application/json',
                    'Accept': 'application/json'
                },
                mode: 'cors'
            });
            
            console.log('üì° –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞:', response.status);
            
            if (!response.ok) {
                const errorText = await response.text();
                console.error('‚ùå –û—à–∏–±–∫–∞ API:', errorText);
                throw new Error(`HTTP error! status: ${response.status}, message: ${errorText}`);
            }
            
            playerData = await response.json();
            console.log('‚úÖ –î–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–∞ –ø–æ–ª—É—á–µ–Ω—ã:', playerData);
        }
        
        // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É CS2
        const statsUrl = `${FACEIT_API_BASE}/players/${playerData.player_id}/stats/cs2`;
        console.log('üåê –ó–∞–ø—Ä–æ—Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', statsUrl);
        
        // –¢–∞–∫–∂–µ –ø–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏–≥—Ä–æ–∫–µ
        const playerDetailsUrl = `${FACEIT_API_BASE}/players/${playerData.player_id}`;
        console.log('üë§ –ó–∞–ø—Ä–æ—Å –¥–µ—Ç–∞–ª–µ–π –∏–≥—Ä–æ–∫–∞:', playerDetailsUrl);
        
        // –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –º–∞—Ç—á–µ–π –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –¥–∞—Ç—ã –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –º–∞—Ç—á–∞
        const matchesUrl = `${FACEIT_API_BASE}/players/${playerData.player_id}/history?game=cs2&offset=0&limit=1`;
        console.log('üéÆ –ó–∞–ø—Ä–æ—Å –∏—Å—Ç–æ—Ä–∏–∏ –º–∞—Ç—á–µ–π:', matchesUrl);
        
        const playerDetailsResponse = await fetch(playerDetailsUrl, {
            method: 'GET',
            headers: {
                'Authorization': `Bearer ${FACEIT_API_KEY}`,
                'Content-Type': 'application/json',
                'Accept': 'application/json'
            },
            mode: 'cors'
        });
        
        if (playerDetailsResponse.ok) {
            const playerDetails = await playerDetailsResponse.json();
            console.log('‚úÖ –î–µ—Ç–∞–ª–∏ –∏–≥—Ä–æ–∫–∞ –ø–æ–ª—É—á–µ–Ω—ã:', playerDetails);
            // –û–±–Ω–æ–≤–ª—è–µ–º playerData —Å –ø–æ–ª–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
            playerData = { ...playerData, ...playerDetails };
        }
        
        // –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –º–∞—Ç—á–µ–π
        console.log('üéÆ –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–ø—Ä–æ—Å –∏—Å—Ç–æ—Ä–∏–∏ –º–∞—Ç—á–µ–π...');
        const matchesResponse = await fetch(matchesUrl, {
            method: 'GET',
            headers: {
                'Authorization': `Bearer ${FACEIT_API_KEY}`,
                'Content-Type': 'application/json',
                'Accept': 'application/json'
            },
            mode: 'cors'
        });
        
        let lastMatchDate = null;
        if (matchesResponse.ok) {
            const matchesData = await matchesResponse.json();
            console.log('üéÆ –ò—Å—Ç–æ—Ä–∏—è –º–∞—Ç—á–µ–π –ø–æ–ª—É—á–µ–Ω–∞:', matchesData);
            
            if (matchesData.items && matchesData.items.length > 0) {
                const lastMatch = matchesData.items[0];
                // –°–æ–≥–ª–∞—Å–Ω–æ Swagger, –∏—Å–ø–æ–ª—å–∑—É–µ–º finished_at –∏–ª–∏ started_at
                let rawTimestamp = lastMatch.finished_at || lastMatch.started_at || lastMatch.created_at;
                console.log('üìÖ –î–∞—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –º–∞—Ç—á–∞ (raw):', rawTimestamp);
                console.log('üìä –î–µ—Ç–∞–ª–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –º–∞—Ç—á–∞:', lastMatch);
                
                // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ—Ç–ª–∞–¥–∫–∞ –¥–ª—è –ø–æ–Ω–∏–º–∞–Ω–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö
                console.log('üîç –î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–æ–ª—è –≤ –º–∞—Ç—á–µ:', Object.keys(lastMatch));
                console.log('‚è∞ finished_at:', lastMatch.finished_at);
                console.log('üöÄ started_at:', lastMatch.started_at);
                console.log('üìù created_at:', lastMatch.created_at);
                
                // FACEIT API –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç timestamp –≤ —Å–µ–∫—É–Ω–¥–∞—Ö, –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥—ã
                if (rawTimestamp) {
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —ç—Ç–æ —Å–µ–∫—É–Ω–¥—ã –∏–ª–∏ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥—ã
                    if (rawTimestamp < 10000000000) { // –ï—Å–ª–∏ –º–µ–Ω—å—à–µ 10^10, —Ç–æ —ç—Ç–æ —Å–µ–∫—É–Ω–¥—ã
                        lastMatchDate = rawTimestamp * 1000;
                        console.log('‚úÖ –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–ª–∏ —Å–µ–∫—É–Ω–¥—ã –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥—ã:', rawTimestamp, '->', lastMatchDate);
                    } else {
                        lastMatchDate = rawTimestamp;
                        console.log('‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–∞–∫ –µ—Å—Ç—å (—É–∂–µ –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö):', rawTimestamp);
                    }
                } else {
                    // –ï—Å–ª–∏ –¥–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –ø–æ–ø—Ä–æ–±—É–µ–º –¥—Ä—É–≥–∏–µ –ø–æ–ª—è
                    console.log('‚ö†Ô∏è –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –ø–æ–ª—è –¥–∞—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –∏—â–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã...');
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –ø–æ–ª—è —Å –¥–∞—Ç–∞–º–∏
                    const dateFields = ['date', 'timestamp', 'time', 'match_date', 'game_date'];
                    for (const field of dateFields) {
                        if (lastMatch[field]) {
                            rawTimestamp = lastMatch[field];
                            console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–∞ –¥–∞—Ç–∞ –≤ –ø–æ–ª–µ ${field}:`, rawTimestamp);
                            break;
                        }
                    }
                    
                    // –ï—Å–ª–∏ –≤—Å–µ –µ—â–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–∞—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
                    if (!rawTimestamp) {
                        console.log('‚ö†Ô∏è –î–∞—Ç–∞ –º–∞—Ç—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤—Ä–µ–º—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö');
                        lastMatchDate = new Date().toISOString();
                    } else {
                        // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞–π–¥–µ–Ω–Ω—É—é –¥–∞—Ç—É
                        if (rawTimestamp < 10000000000) {
                            lastMatchDate = rawTimestamp * 1000;
                        } else {
                            lastMatchDate = rawTimestamp;
                        }
                    }
                }
            } else {
                console.log('‚ö†Ô∏è –ò—Å—Ç–æ—Ä–∏—è –º–∞—Ç—á–µ–π –ø—É—Å—Ç–∞ –∏–ª–∏ –Ω–µ—Ç —ç–ª–µ–º–µ–Ω—Ç–æ–≤');
            }
        } else {
            const errorText = await matchesResponse.text();
            console.log('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –º–∞—Ç—á–µ–π, —Å—Ç–∞—Ç—É—Å:', matchesResponse.status);
            console.log('‚ùå –û—à–∏–±–∫–∞:', errorText);
        }
        
        const statsResponse = await fetch(statsUrl, {
            method: 'GET',
            headers: {
                'Authorization': `Bearer ${FACEIT_API_KEY}`,
                'Content-Type': 'application/json',
                'Accept': 'application/json'
            },
            mode: 'cors'
        });
        
        console.log('üì° –°—Ç–∞—Ç—É—Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', statsResponse.status);
        
        if (statsResponse.ok) {
            const statsData = await statsResponse.json();
            console.log('‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—É—á–µ–Ω–∞:', statsData);
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö –∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ –∏–∑–≤–ª–µ–∫–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è
            const cs2Data = playerData.games?.cs2 || {};
            const lifetimeStats = statsData.lifetime || {};
            
            // –ò—â–µ–º —Å–µ–≥–º–µ–Ω—Ç CS2 –≤ –º–∞—Å—Å–∏–≤–µ segments
            const cs2Segment = statsData.segments?.find(segment => segment.game_id === 'cs2');
            
            console.log('üéÆ CS2 –¥–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–∞ (–∏–∑ playerData.games?.cs2):', cs2Data);
            console.log('üìà –ü–æ–∂–∏–∑–Ω–µ–Ω–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:', lifetimeStats);
            console.log('üìä –ù–∞–π–¥–µ–Ω–Ω—ã–π CS2 —Å–µ–≥–º–µ–Ω—Ç:', cs2Segment);
            console.log('üë§ –ü–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–∞:', playerData);
            
            // –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–æ–≥–ª–∞—Å–Ω–æ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–π –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ FACEIT API
            // skill_level –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ playerData –Ω–∞–ø—Ä—è–º—É—é
            const skillLevel = playerData.skill_level || 0;
            
            // ELO –º–æ–∂–µ—Ç –±—ã—Ç—å –≤ —Ä–∞–∑–Ω—ã—Ö –º–µ—Å—Ç–∞—Ö, –ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏
            let elo = 0;
            if (cs2Segment?.stats?.elo) {
                elo = cs2Segment.stats.elo;
            } else if (cs2Segment?.stats?.faceit_elo) {
                elo = cs2Segment.stats.faceit_elo;
            } else if (playerData.games?.cs2?.elo) {
                elo = playerData.games.cs2.elo;
            } else if (playerData.games?.cs2?.faceit_elo) {
                elo = playerData.games.cs2.faceit_elo;
            }

            // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —É—Ä–æ–≤–Ω—è –Ω–∞ –æ—Å–Ω–æ–≤–µ ELO
            function calculateSkillLevel(elo) {
                console.log(`üßÆ –†–∞—Å—á–µ—Ç —É—Ä–æ–≤–Ω—è –¥–ª—è ELO: ${elo}`);
                
                let level;
                if (elo >= 2001) level = 10;
                else if (elo >= 1751) level = 9;
                else if (elo >= 1531) level = 8;
                else if (elo >= 1351) level = 7;
                else if (elo >= 1201) level = 6;
                else if (elo >= 1051) level = 5;
                else if (elo >= 901) level = 4;
                else if (elo >= 751) level = 3;
                else if (elo >= 501) level = 2;
                else if (elo >= 100) level = 1;
                else level = 0; // –ï—Å–ª–∏ ELO –º–µ–Ω—å—à–µ 100
                
                console.log(`‚úÖ –†–∞—Å—Å—á–∏—Ç–∞–Ω–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å: ${level} –¥–ª—è ELO: ${elo}`);
                return level;
            }

            // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å, –µ—Å–ª–∏ API –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏–ª –µ–≥–æ
            const finalSkillLevel = skillLevel > 0 ? skillLevel : calculateSkillLevel(elo);

            console.log('üéØ –ù–∞–π–¥–µ–Ω–Ω—ã–π ELO:', elo);
            console.log('üìà –ù–∞–π–¥–µ–Ω–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å –∏–∑ API:', skillLevel);
            console.log('üìä –†–∞—Å—Å—á–∏—Ç–∞–Ω–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å –ø–æ ELO:', calculateSkillLevel(elo));
            console.log('üèÜ –§–∏–Ω–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å:', finalSkillLevel);
            
            // –û–±—ä–µ–¥–∏–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–∞ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            const combinedStats = {
                ...playerData,
                games: {
                    cs2: {
                        skill_level: finalSkillLevel,
                        elo: elo,
                        game_player_id: cs2Segment?.game_player_id || '',
                        last_match_date: lastMatchDate
                    }
                },
                games_count: lifetimeStats.Matches || 0,
                wins: lifetimeStats.Wins || 0,
                accuracy: lifetimeStats['Average Headshots %'] || 0,
                win_streak: lifetimeStats['Current Win Streak'] || 0,
                last_match_date: lastMatchDate
            };
            
            console.log('üìä –û–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:', combinedStats);
            console.log('üéØ ELO:', combinedStats.games.cs2.elo);
            console.log('üìà –£—Ä–æ–≤–µ–Ω—å:', combinedStats.games.cs2.skill_level);
            console.log('üìÖ last_match_date –≤ combinedStats:', combinedStats.last_match_date);
            console.log('üìÖ last_match_date –≤ games.cs2:', combinedStats.games.cs2.last_match_date);
            
            return combinedStats;
        } else {
            const errorText = await statsResponse.text();
            console.error('‚ùå –û—à–∏–±–∫–∞ API —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', errorText);
            throw new Error(`HTTP error! status: ${statsResponse.status}, message: ${errorText}`);
        }
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–≥—Ä–æ–∫–∞:', error);
        console.error('üìã –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:', {
            name: error.name,
            message: error.message,
            stack: error.stack
        });
        return null;
    }
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Ä–µ–π—Ç–∏–Ω–≥–∞
async function loadRankingData() {
    console.log('üîÑ –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –¥–∞–Ω–Ω—ã—Ö —Ä–µ–π—Ç–∏–Ω–≥–∞');
    console.log('üìã –°–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤:', playersList);
    
    if (playersList.length === 0) {
        console.log('‚ùå –ù–µ—Ç –∏–≥—Ä–æ–∫–æ–≤ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏');
        showEmptyState();
        return;
    }

    showLoadingState();
    
    try {
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Å–µ—Ö –∏–≥—Ä–æ–∫–æ–≤
        const playersWithStats = [];
        
        for (const player of playersList) {
            console.log(`üîç –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∏–≥—Ä–æ–∫–∞: ${player.nickname}`);
            const stats = await getPlayerStats(player.nickname);
            if (stats) {
                console.log(`‚úÖ –î–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã –¥–ª—è ${player.nickname}:`, stats);
                console.log(`üìÖ last_match_date –¥–ª—è ${player.nickname}:`, stats.games?.cs2?.last_match_date);
                playersWithStats.push({
                    ...player,
                    stats: stats,
                    lastUpdated: new Date().toISOString()
                });
            } else {
                console.log(`‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è ${player.nickname}`);
                playersWithStats.push({
                    ...player,
                    stats: null,
                    lastUpdated: new Date().toISOString()
                });
            }
        }
        
        console.log('üìä –ò–≥—Ä–æ–∫–∏ —Å –¥–∞–Ω–Ω—ã–º–∏:', playersWithStats);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤ —Å –Ω–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        playersList = playersWithStats;
        savePlayersList();
        
        // –ü—Ä–∏–º–µ–Ω—è–µ–º —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫—É
        filteredPlayers = sortPlayers(playersWithStats);
        
        console.log('üèÜ –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–∏:', filteredPlayers);
        
        // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ç–µ–∫—É—â–∏–π —Ñ–∏–ª—å—Ç—Ä
        applyFilter(currentFilter);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        updateRankingTable();
        updateStatsDisplay();
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–∫–æ–Ω–∫–∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
        updateSortIcons();
        
        hideLoadingState();
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö —Ä–µ–π—Ç–∏–Ω–≥–∞:', error);
        console.error('üìã –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:', {
            name: error.name,
            message: error.message,
            stack: error.stack
        });
        showNotification('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö', 'error');
        hideLoadingState();
    }
}

// –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤
function applyFilter(filter) {
    currentFilter = filter;
    console.log('üîç –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä:', filter);
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ñ–∏–ª—å—Ç—Ä–µ
    const filterText = getFilterDisplayName(filter);
    showNotification(`–§–∏–ª—å—Ç—Ä: ${filterText}`, 'success');
    
    switch (filter) {
        case 'all':
            filteredPlayers = playersList; // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ—Ö –∏–≥—Ä–æ–∫–æ–≤
            break;
        case 'music':
            filteredPlayers = playersList.filter(player => player.group === 'music');
            break;
        case 'black':
            filteredPlayers = playersList.filter(player => player.group === 'black');
            break;
    }
    
    console.log('üë• –ò–≥—Ä–æ–∫–∏ –ø–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏:', filteredPlayers);
    
    // –ü—Ä–∏–º–µ–Ω—è–µ–º —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫—É –∫ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–º –∏–≥—Ä–æ–∫–∞–º
    filteredPlayers = sortPlayers(filteredPlayers);
    
    console.log('üîÑ –ò–≥—Ä–æ–∫–∏ –ø–æ—Å–ª–µ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏:', filteredPlayers);
    
    updateRankingTable();
    
    console.log('‚úÖ –§–∏–ª—å—Ç—Ä –ø—Ä–∏–º–µ–Ω–µ–Ω, —Ç–∞–±–ª–∏—Ü–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞');
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã —Ä–µ–π—Ç–∏–Ω–≥–∞
function updateRankingTable() {
    const tbody = document.getElementById('ranking-tbody');
    
    console.log('üìã –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—É —Ä–µ–π—Ç–∏–Ω–≥–∞');
    console.log('üë• –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–∏:', filteredPlayers);
    
    if (filteredPlayers.length === 0) {
        console.log('‚ùå –ù–µ—Ç –∏–≥—Ä–æ–∫–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è');
        tbody.innerHTML = `
            <tr>
                <td colspan="7" style="text-align: center; padding: 40px; color: var(--text-secondary);">
                    –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
                </td>
            </tr>
        `;
        return;
    }
    
    tbody.innerHTML = filteredPlayers.map((player, index) => {
        const stats = player.stats;
        const place = index + 1;
        const placeClass = place <= 3 ? `top-${place}` : '';
        
        console.log(`üë§ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏–≥—Ä–æ–∫–∞ ${player.nickname}:`, stats);
        
        // –ï—Å–ª–∏ —É –∏–≥—Ä–æ–∫–∞ –Ω–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º "–ø—É—Å—Ç–æ"
        if (!stats) {
            console.log(`‚ö†Ô∏è –£ –∏–≥—Ä–æ–∫–∞ ${player.nickname} –Ω–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏`);
            return `
                <tr>
                    <td class="ranking-place ${placeClass}">${place}</td>
                    <td>
                        <div class="player-info">
                            <div class="player-details">
                                <h4>${player.nickname}</h4>
                            </div>
                        </div>
                    </td>
                    <td class="stats-cell">
                        <span class="elo-value">–ø—É—Å—Ç–æ</span>
                    </td>
                    <td class="stats-cell">
                        <span class="level-badge level-0">-</span>
                    </td>
                    <td class="stats-cell">–ø—É—Å—Ç–æ</td>
                    <td class="stats-cell">–ø—É—Å—Ç–æ</td>
                    <td class="stats-cell">–ø—É—Å—Ç–æ</td>
                    <td class="stats-cell">–ø—É—Å—Ç–æ</td>
                    <td class="actions-cell">
                        <a href="player-details.html?nickname=${encodeURIComponent(player.nickname)}" class="action-btn">
                            <i class="fas fa-chart-line"></i>
                            –ü–æ–¥—Ä–æ–±–Ω–µ–µ
                        </a>
                    </td>
                </tr>
            `;
        }
        
        console.log(`üìä –î–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è ${player.nickname}:`);
        console.log('  - ELO:', stats.games?.cs2?.elo);
        console.log('  - –£—Ä–æ–≤–µ–Ω—å:', stats.games?.cs2?.skill_level);
        console.log('  - –ú–∞—Ç—á–∏:', stats.games_count);
        console.log('  - –ü–æ–±–µ–¥—ã:', stats.wins);
        console.log('  - –î–∞—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –º–∞—Ç—á–∞ (raw):', stats.games?.cs2?.last_match_date);
        console.log('  - –¢–∏–ø –¥–∞—Ç—ã:', typeof stats.games?.cs2?.last_match_date);
        
        return `
            <tr>
                <td class="ranking-place ${placeClass}">${place}</td>
                <td>
                    <div class="player-info">
                        <div class="player-details">
                            <h4>${player.nickname}</h4>
                        </div>
                    </div>
                </td>
                <td class="stats-cell">
                    <span class="elo-value">${stats.games.cs2.elo || 0}</span>
                </td>
                <td class="stats-cell">
                    <span class="level-badge level-${stats.games.cs2.skill_level || 0}">${stats.games.cs2.skill_level || 0}</span>
                </td>
                <td class="stats-cell">${stats.games_count || 0}</td>
                                    <td class="stats-cell">${stats.wins || 0}</td>
                    <td class="stats-cell last-match-cell">${formatLastMatchDate(stats.games.cs2.last_match_date)}</td>
                <td class="actions-cell">
                    <a href="player-details.html?nickname=${encodeURIComponent(player.nickname)}" class="action-btn">
                        <i class="fas fa-chart-line"></i>
                        –ü–æ–¥—Ä–æ–±–Ω–µ–µ
                    </a>
                </td>
            </tr>
        `;
    }).join('');
    
    console.log('‚úÖ –¢–∞–±–ª–∏—Ü–∞ —Ä–µ–π—Ç–∏–Ω–≥–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞');
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
function updateStatsDisplay() {
    const totalPlayers = document.getElementById('total-players');
    
    totalPlayers.textContent = playersList.length;
    
    console.log('üìä –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:');
    console.log('  - –í—Å–µ–≥–æ –∏–≥—Ä–æ–∫–æ–≤:', playersList.length);
    console.log('  - –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤:', filteredPlayers.length);
    console.log('  - –¢–µ–∫—É—â–∏–π —Ñ–∏–ª—å—Ç—Ä:', currentFilter);
    console.log('  - –¢–µ–∫—É—â–∞—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞:', currentSortField, currentSortDirection);
    
    console.log('‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞');
}

// –ü–æ–∏—Å–∫ –∏–≥—Ä–æ–∫–æ–≤
function searchPlayers(query) {
    console.log('üîç –ü–æ–∏—Å–∫ –∏–≥—Ä–æ–∫–æ–≤ –ø–æ –∑–∞–ø—Ä–æ—Å—É:', query);
    
    if (!query.trim()) {
        console.log('üîç –ü—É—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å, –ø—Ä–∏–º–µ–Ω—è–µ–º —Ç–µ–∫—É—â–∏–π —Ñ–∏–ª—å—Ç—Ä');
        applyFilter(currentFilter);
        return;
    }
    
    const searchQuery = query.toLowerCase();
    const searchResults = playersList.filter(player => 
        player.nickname.toLowerCase().includes(searchQuery)
    );
    
    console.log('üîç –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞:', searchResults);
    
    // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ç–µ–∫—É—â–∏–π —Ñ–∏–ª—å—Ç—Ä –∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º –ø–æ–∏—Å–∫–∞
    switch (currentFilter) {
        case 'music':
            filteredPlayers = searchResults.filter(player => player.group === 'music');
            break;
        case 'black':
            filteredPlayers = searchResults.filter(player => player.group === 'black');
            break;
        default:
            filteredPlayers = searchResults;
    }
    
    console.log('üîç –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏:', filteredPlayers);
    
    // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ç–µ–∫—É—â—É—é —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫—É
    filteredPlayers = sortPlayers(filteredPlayers);
    
    updateRankingTable();
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö –ø–æ–∏—Å–∫–∞
    if (searchResults.length > 0) {
        showNotification(`–ù–∞–π–¥–µ–Ω–æ –∏–≥—Ä–æ–∫–æ–≤: ${filteredPlayers.length}`, 'success');
        console.log('‚úÖ –ü–æ–∏—Å–∫ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ, –Ω–∞–π–¥–µ–Ω–æ –∏–≥—Ä–æ–∫–æ–≤:', filteredPlayers.length);
    } else {
        showNotification('–ò–≥—Ä–æ–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã', 'warning');
        console.log('‚ö†Ô∏è –ü–æ–∏—Å–∫ –∑–∞–≤–µ—Ä—à–µ–Ω, –∏–≥—Ä–æ–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
    }
}

// –°–æ—Å—Ç–æ—è–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏
function showLoadingState() {
    console.log('‚è≥ –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏');
    document.getElementById('loading-spinner').style.display = 'block';
    document.getElementById('empty-state').style.display = 'none';
    document.querySelector('.ranking-table-container').style.display = 'none';
    console.log('‚úÖ –°–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–∫–∞–∑–∞–Ω–æ');
}

function hideLoadingState() {
    console.log('‚úÖ –°–∫—Ä—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏');
    document.getElementById('loading-spinner').style.display = 'none';
    document.querySelector('.ranking-table-container').style.display = 'block';
    console.log('‚úÖ –°–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–∫—Ä—ã—Ç–æ, —Ç–∞–±–ª–∏—Ü–∞ –ø–æ–∫–∞–∑–∞–Ω–∞');
}

function showEmptyState() {
    console.log('üì≠ –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—É—Å—Ç–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ');
    document.getElementById('loading-spinner').style.display = 'none';
    document.getElementById('empty-state').style.display = 'block';
    document.querySelector('.ranking-table-container').style.display = 'none';
    console.log('‚úÖ –ü—É—Å—Ç–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–∫–∞–∑–∞–Ω–æ');
}

// –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–∫
function initSettingsModal() {
    console.log('‚öôÔ∏è –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫');
    
    const modal = document.getElementById('settings-modal');
    const settingsBtn = document.getElementById('settings-btn');
    const modalClose = document.getElementById('modal-close');
    const addPlayerBtn = document.getElementById('add-player-btn');
    const addPlayerInput = document.getElementById('add-player-nickname');
    
    console.log('üîç –ù–∞–π–¥–µ–Ω–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã:', {
        modal: !!modal,
        settingsBtn: !!settingsBtn,
        modalClose: !!modalClose,
        addPlayerBtn: !!addPlayerBtn,
        addPlayerInput: !!addPlayerInput
    });
    
    // –û—Ç–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
    settingsBtn.addEventListener('click', () => {
        console.log('üîò –ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫');
        updatePlayersListDisplay();
        modal.classList.add('active');
        console.log('‚úÖ –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –æ—Ç–∫—Ä—ã—Ç–æ');
    });
    
    // –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
    modalClose.addEventListener('click', () => {
        console.log('üîò –ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è');
        modal.classList.remove('active');
        console.log('‚úÖ –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∑–∞–∫—Ä—ã—Ç–æ');
    });
    
    // –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ –∫–ª–∏–∫—É –≤–Ω–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
    modal.addEventListener('click', (e) => {
        if (e.target === modal) {
            console.log('üîò –ö–ª–∏–∫ –≤–Ω–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞');
            modal.classList.remove('active');
            console.log('‚úÖ –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∑–∞–∫—Ä—ã—Ç–æ –ø–æ –∫–ª–∏–∫—É –≤–Ω–µ');
        }
    });
    
    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏–≥—Ä–æ–∫–∞
    addPlayerBtn.addEventListener('click', async () => {
        console.log('üîò –ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∏–≥—Ä–æ–∫–∞');
        const nickname = addPlayerInput.value.trim();
        const groupSelect = document.getElementById('add-player-group');
        const group = groupSelect.value;
        
        console.log('üìù –î–∞–Ω–Ω—ã–µ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è:', { nickname, group });
        
        if (nickname) {
            await addPlayer(nickname, group);
            addPlayerInput.value = '';
            groupSelect.value = '';
            console.log('‚úÖ –ò–≥—Ä–æ–∫ –¥–æ–±–∞–≤–ª–µ–Ω, –ø–æ–ª—è –æ—á–∏—â–µ–Ω—ã');
        } else {
            console.log('‚ö†Ô∏è –ù–∏–∫–Ω–µ–π–º –ø—É—Å—Ç–æ–π, –∏–≥—Ä–æ–∫ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω');
        }
    });
    
    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏–≥—Ä–æ–∫–∞ –ø–æ Enter
    addPlayerInput.addEventListener('keypress', async (e) => {
        if (e.key === 'Enter') {
            console.log('‚å®Ô∏è –ù–∞–∂–∞—Ç–∞ –∫–ª–∞–≤–∏—à–∞ Enter –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∏–≥—Ä–æ–∫–∞');
            const nickname = addPlayerInput.value.trim();
            const groupSelect = document.getElementById('add-player-group');
            const group = groupSelect.value;
            
            console.log('üìù –î–∞–Ω–Ω—ã–µ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è (Enter):', { nickname, group });
            
            if (nickname) {
                await addPlayer(nickname, group);
                addPlayerInput.value = '';
                groupSelect.value = '';
                console.log('‚úÖ –ò–≥—Ä–æ–∫ –¥–æ–±–∞–≤–ª–µ–Ω –ø–æ Enter, –ø–æ–ª—è –æ—á–∏—â–µ–Ω—ã');
            } else {
                console.log('‚ö†Ô∏è –ù–∏–∫–Ω–µ–π–º –ø—É—Å—Ç–æ–π, –∏–≥—Ä–æ–∫ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω –ø–æ Enter');
            }
        }
    });
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–∫–æ–≤ –ø–æ –ø–æ–¥—Å–∫–∞–∑–∫–∞–º
    document.querySelectorAll('.hint-tag').forEach(tag => {
        tag.addEventListener('click', () => {
            const nickname = tag.getAttribute('data-nickname');
            console.log('üè∑Ô∏è –ö–ª–∏–∫ –ø–æ –ø–æ–¥—Å–∫–∞–∑–∫–µ:', nickname);
            addPlayerInput.value = nickname;
            addPlayerInput.focus();
            console.log('‚úÖ –ü–æ–¥—Å–∫–∞–∑–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∞ –∏ —Ñ–æ–∫—É—Å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
        });
    });
    
    console.log('‚úÖ –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ');
    console.log('üîß –í—Å–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã');
}

// –ì–ª–æ–±–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫
function openSettings() {
    console.log('üîò –í—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ openSettings');
    document.getElementById('settings-modal').classList.add('active');
    updatePlayersListDisplay();
    console.log('‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ—Ç–∫—Ä—ã—Ç—ã —á–µ—Ä–µ–∑ openSettings');
    console.log('üîß –§—É–Ω–∫—Ü–∏—è openSettings –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ');
}

// –ü–æ–∫–∞–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
function showNotification(message, type = 'info') {
    console.log(`üîî –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ: ${message} (—Ç–∏–ø: ${type})`);
    
    const notification = document.createElement('div');
    notification.className = 'notification';
    notification.textContent = message;
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–≤–µ—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    let backgroundColor;
    switch (type) {
        case 'success':
            backgroundColor = 'linear-gradient(135deg, #4CAF50, #45a049)';
            break;
        case 'error':
            backgroundColor = 'linear-gradient(135deg, #f44336, #d32f2f)';
            break;
        case 'warning':
            backgroundColor = 'linear-gradient(135deg, #ff9800, #f57c00)';
            break;
        default:
            backgroundColor = 'var(--gradient-primary)';
    }
    
    notification.style.cssText = `
        position: fixed;
        top: 20px;
        right: 20px;
        background: ${backgroundColor};
        color: white;
        padding: 1rem 2rem;
        border-radius: 10px;
        z-index: 3000;
        animation: slideIn 0.3s ease;
        box-shadow: 0 4px 15px rgba(0, 0, 0, 0.2);
    `;
    
    document.body.appendChild(notification);
    
    setTimeout(() => {
        console.log('‚è∞ –°–∫—Ä—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã');
        notification.style.animation = 'slideOut 0.3s ease';
        setTimeout(() => {
            document.body.removeChild(notification);
            console.log('‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ –∏–∑ DOM');
        }, 300);
    }, 3000);
    
    console.log('‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–∫–∞–∑–∞–Ω–æ –∏ –±—É–¥–µ—Ç —Å–∫—Ä—ã—Ç–æ —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã');
}

// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ CSS –∞–Ω–∏–º–∞—Ü–∏–π –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
const notificationStyles = document.createElement('style');
notificationStyles.textContent = `
    @keyframes slideIn {
        from { transform: translateX(100%); opacity: 0; }
        to { transform: translateX(0); opacity: 1; }
    }
    @keyframes slideOut {
        from { transform: translateX(0); opacity: 1; }
        to { transform: translateX(100%); opacity: 0; }
    }
`;
document.head.appendChild(notificationStyles);

// –§—É–Ω–∫—Ü–∏—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –∏–≥—Ä–æ–∫–æ–≤
function sortPlayers(players) {
    console.log('üîÑ –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –∏–≥—Ä–æ–∫–æ–≤ –ø–æ –ø–æ–ª—é:', currentSortField, '–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:', currentSortDirection);
    
    return players.sort((a, b) => {
        // –ò–≥—Ä–æ–∫–∏ –±–µ–∑ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤—Å–µ–≥–¥–∞ –∏–¥—É—Ç –≤ –∫–æ–Ω–µ—Ü
        if (!a.stats && !b.stats) return 0;
        if (!a.stats) return 1;
        if (!b.stats) return -1;
        
        let aValue, bValue;
        
        switch (currentSortField) {
            case 'elo':
                aValue = a.stats.games?.cs2?.elo || 0;
                bValue = b.stats.games?.cs2?.elo || 0;
                break;
            case 'matches':
                aValue = a.stats.games_count || 0;
                bValue = b.stats.games_count || 0;
                break;
            case 'wins':
                aValue = a.stats.wins || 0;
                bValue = b.stats.wins || 0;
                break;
            case 'lastMatch':
                // –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞—Ç—É –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –º–∞—Ç—á–∞ –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
                aValue = a.stats.games?.cs2?.last_match_date || a.lastUpdated || 0;
                bValue = b.stats.games?.cs2?.last_match_date || b.lastUpdated || 0;
                console.log(`üìÖ –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –¥–∞—Ç–µ: ${a.nickname}(${aValue}) vs ${b.nickname}(${bValue})`);
                break;
            default:
                aValue = a.stats.games?.cs2?.elo || 0;
                bValue = b.stats.games?.cs2?.elo || 0;
        }
        
        if (currentSortDirection === 'asc') {
            return aValue - bValue;
        } else {
            return bValue - aValue;
        }
    });
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
function changeSort(field) {
    console.log('üîÑ –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏:', field);
    
    // –ï—Å–ª–∏ –∫–ª–∏–∫–∞–µ–º –Ω–∞ —Ç–æ –∂–µ –ø–æ–ª–µ, –º–µ–Ω—è–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
    if (currentSortField === field) {
        currentSortDirection = currentSortDirection === 'asc' ? 'desc' : 'asc';
        console.log('üîÑ –ò–∑–º–µ–Ω—è–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –Ω–∞:', currentSortDirection);
    } else {
        // –ï—Å–ª–∏ –∫–ª–∏–∫–∞–µ–º –Ω–∞ –Ω–æ–≤–æ–µ –ø–æ–ª–µ, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ —É–±—ã–≤–∞–Ω–∏—é
        currentSortField = field;
        currentSortDirection = 'desc';
        console.log('üîÑ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤–æ–µ –ø–æ–ª–µ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏:', field, '–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:', currentSortDirection);
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∏–∫–æ–Ω–∫–∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
    updateSortIcons();
    
    // –ü—Ä–∏–º–µ–Ω—è–µ–º —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫—É
    filteredPlayers = sortPlayers(filteredPlayers);
    updateRankingTable();
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–µ
    const directionText = currentSortDirection === 'asc' ? '–ø–æ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—é' : '–ø–æ —É–±—ã–≤–∞–Ω–∏—é';
    const fieldText = getFieldDisplayName(field);
    showNotification(`–°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞: ${fieldText} ${directionText}`, 'success');
    
    console.log(`üìä –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞: ${currentSortField} ${currentSortDirection}`);
    console.log('‚úÖ –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∞ –∏ —Ç–∞–±–ª–∏—Ü–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞');
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è –ø–æ–ª—è
function getFieldDisplayName(field) {
    const displayName = (() => {
        switch (field) {
            case 'elo': return 'ELO';
            case 'matches': return '–ú–∞—Ç—á–∏';
            case 'wins': return '–ü–æ–±–µ–¥—ã';
            case 'lastMatch': return '–ü–æ—Å–ª–µ–¥–Ω–∏–π –º–∞—Ç—á';
            default: return field;
        }
    })();
    
    console.log(`üè∑Ô∏è –ù–∞–∑–≤–∞–Ω–∏–µ –ø–æ–ª—è "${field}" -> "${displayName}"`);
    return displayName;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–∞
function getFilterDisplayName(filter) {
    const displayName = (() => {
        switch (filter) {
            case 'all': return '–í—Å–µ –∏–≥—Ä–æ–∫–∏';
            case 'music': return '–ì—Ä—É–ø–ø–∞: –ú—É–∑—ã–∫–∞';
            case 'black': return '–ì—Ä—É–ø–ø–∞: –ß–µ—Ä–Ω—ã–µ';
            default: return filter;
        }
    })();
    
    console.log(`üè∑Ô∏è –ù–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞ "${filter}" -> "${displayName}"`);
    return displayName;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–∫–æ–Ω–æ–∫ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
function updateSortIcons() {
    console.log('üéØ –û–±–Ω–æ–≤–ª—è–µ–º –∏–∫–æ–Ω–∫–∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –¥–ª—è –ø–æ–ª—è:', currentSortField, '–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:', currentSortDirection);
    
    // –£–±–∏—Ä–∞–µ–º –≤—Å–µ –∫–ª–∞—Å—Å—ã —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
    document.querySelectorAll('.sortable').forEach(th => {
        th.classList.remove('sort-asc', 'sort-desc');
    });
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞—Å—Å—ã –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
    const currentSortHeader = document.querySelector(`[data-sort="${currentSortField}"]`);
    if (currentSortHeader) {
        currentSortHeader.classList.add(`sort-${currentSortDirection}`);
        console.log('‚úÖ –ò–∫–æ–Ω–∫–∞ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –¥–ª—è:', currentSortField);
    } else {
        console.log('‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω –∑–∞–≥–æ–ª–æ–≤–æ–∫ –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏:', currentSortField);
    }
    
    console.log('‚úÖ –ò–∫–æ–Ω–∫–∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã');
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞—Ç—ã –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –º–∞—Ç—á–∞
function formatLastMatchDate(lastMatch) {
    if (!lastMatch) return '–ø—É—Å—Ç–æ';
    
    console.log('üîß formatLastMatchDate –≤—ã–∑–≤–∞–Ω–∞ —Å:', lastMatch);
    
    try {
        const date = new Date(lastMatch);
        console.log('üìÖ –°–æ–∑–¥–∞–Ω –æ–±—ä–µ–∫—Ç Date:', date);
        console.log('‚è∞ Timestamp –æ–±—ä–µ–∫—Ç–∞ Date:', date.getTime());
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∞—Ç–∞ –≤–∞–ª–∏–¥–Ω–∞
        if (isNaN(date.getTime())) {
            console.log('‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –¥–∞—Ç–∞:', lastMatch);
            return '–ø—É—Å—Ç–æ';
        }
        
        const now = new Date();
        const diffInHours = Math.floor((now - date) / (1000 * 60 * 60));
        console.log('‚è±Ô∏è –†–∞–∑–Ω–∏—Ü–∞ –≤ —á–∞—Å–∞—Ö:', diffInHours);
        
        let result;
        
        // –ï—Å–ª–∏ –º–∞—Ç—á –±—ã–ª —Å–µ–≥–æ–¥–Ω—è
        if (diffInHours < 24) {
            result = `–°–µ–≥–æ–¥–Ω—è - ${date.toLocaleTimeString('ru-RU', {
                hour: '2-digit',
                minute: '2-digit'
            })}`;
        }
        // –ï—Å–ª–∏ –º–∞—Ç—á –±—ã–ª –≤—á–µ—Ä–∞
        else if (diffInHours < 48) {
            result = `–í—á–µ—Ä–∞ - ${date.toLocaleTimeString('ru-RU', {
                hour: '2-digit',
                minute: '2-digit'
            })}`;
        }
        // –ï—Å–ª–∏ –º–∞—Ç—á –±—ã–ª –Ω–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ
        else if (diffInHours < 168) {
            const days = Math.floor(diffInHours / 24);
            result = `${days}–¥ –Ω–∞–∑–∞–¥ - ${date.toLocaleTimeString('ru-RU', {
                hour: '2-digit',
                minute: '2-digit'
            })}`;
        }
        // –ï—Å–ª–∏ –º–∞—Ç—á –±—ã–ª –¥–∞–≤–Ω–æ, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è
        else {
            result = `${date.toLocaleDateString('ru-RU', {
                day: '2-digit',
                month: 'short'
            })} - ${date.toLocaleTimeString('ru-RU', {
                hour: '2-digit',
                minute: '2-digit'
            })}`;
        }
        
        console.log('‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', result);
        return result;
        
    } catch (error) {
        console.log('‚ùå –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞—Ç—ã:', error);
        return '–ø—É—Å—Ç–æ';
    }
}



// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
document.addEventListener('DOMContentLoaded', () => {
    console.log('üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã FACEIT —Ä–µ–π—Ç–∏–Ω–≥–∞');
    
    loadPlayersList();
    initSettingsModal();
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–∏—Å–∫–∞
    const searchInput = document.getElementById('player-search');
    searchInput.addEventListener('input', (e) => {
        searchPlayers(e.target.value);
    });
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ñ–∏–ª—å—Ç—Ä–æ–≤
    document.querySelectorAll('.filter-btn').forEach(btn => {
        btn.addEventListener('click', () => {
            // –£–±–∏—Ä–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –∫–ª–∞—Å—Å —É –≤—Å–µ—Ö –∫–Ω–æ–ø–æ–∫
            document.querySelectorAll('.filter-btn').forEach(b => b.classList.remove('active'));
            // –î–æ–±–∞–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –∫–ª–∞—Å—Å –∫ –Ω–∞–∂–∞—Ç–æ–π –∫–Ω–æ–ø–∫–µ
            btn.classList.add('active');
            // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä
            applyFilter(btn.getAttribute('data-filter'));
        });
    });
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
    document.querySelectorAll('.sortable').forEach(th => {
        th.addEventListener('click', () => {
            const sortField = th.getAttribute('data-sort');
            changeSort(sortField);
        });
    });
    
    console.log('üîÑ –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –¥–∞–Ω–Ω—ã—Ö —Ä–µ–π—Ç–∏–Ω–≥–∞...');
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ä–µ–π—Ç–∏–Ω–≥–∞
    loadRankingData();
    
    // –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
    setInterval(() => {
        console.log('üîÑ –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Ä–µ–π—Ç–∏–Ω–≥–∞...');
        loadRankingData();
    }, 5 * 60 * 1000);
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
window.addEventListener('error', (e) => {
    console.error('‚ùå –û—à–∏–±–∫–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ —Ä–µ–π—Ç–∏–Ω–≥–∞:', e.error);
    console.error('üìç –ú–µ—Å—Ç–æ –æ—à–∏–±–∫–∏:', e.filename, '—Å—Ç—Ä–æ–∫–∞:', e.lineno, '–∫–æ–ª–æ–Ω–∫–∞:', e.colno);
    console.error('üìã –°—Ç–µ–∫ –≤—ã–∑–æ–≤–æ–≤:', e.error?.stack);
});

// –≠–∫—Å–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–π –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
window.FaceitRanking = {
    loadRankingData,
    addPlayer,
    removePlayer,
    editPlayerGroup,
    applyFilter,
    changeSort,
    showNotification
};

console.log('üåê –§—É–Ω–∫—Ü–∏–∏ FACEIT —Ä–µ–π—Ç–∏–Ω–≥–∞ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –≤ window.FaceitRanking');
console.log('üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:', Object.keys(window.FaceitRanking));
