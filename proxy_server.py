#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–æ–π –ø—Ä–æ–∫—Å–∏-—Å–µ—Ä–≤–µ—Ä –¥–ª—è API Clash Royale
–û–±—Ö–æ–¥–∏—Ç CORS –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –¥–ª—è —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞
"""

import http.server
import socketserver
import urllib.request
import urllib.parse
import json
import ssl
from urllib.error import HTTPError, URLError

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
CLASH_ROYALE_API_TOKEN = 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzUxMiIsImtpZCI6IjI4YTMxOGY3LTAwMDAtYTFlYi03ZmExLTJjNzQzM2M2Y2NhNSJ9.eyJpc3MiOiJzdXBlcmNlbGwiLCJhdWQiOiJzdXBlcmNlbGw6Z2FtZWFwaSIsImp0aSI6ImJlNTNhZjBlLTcxYmItNDFmYy05NjA3LWQ0YjRkNjY0NjA4YSIsImlhdCI6MTc1NjQwMDY2Niwic3ViIjoiZGV2ZWxvcGVyL2QxNmI1OTMxLTc4NTctNTQ5Yy1hMjlmLTAzOTEwNDI3NDc2NSIsInNjb3BlcyI6WyJyb3lhbGUiXSwibGltaXRzIjpbeyJ0aWVyIjoiZGV2ZWxvcGVyL3NpbHZlciIsInR5cGUiOiJ0aHJvdHRsaW5nIn0seyJjaWRycyI6WyI1LjM1LjExMy45MSJdLCJ0eXBlIjoiY2xpZW50In1dfQ.azalNZ4Nv4qH_TGgToldJV8IHcesnc0FvRMnnVo00yp5JT2kT2IdVvtSMpTnV8RwMt0N0hZfoAFtc4ESt0GK3w'
API_BASE_URL = 'https://api.clashroyale.com/v1'

class ClashRoyaleProxyHandler(http.server.SimpleHTTPRequestHandler):
    def do_GET(self):
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ API Clash Royale
        if self.path.startswith('/api/'):
            self.handle_api_request()
        else:
            # –û–±—ã—á–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤
            super().do_GET()
    
    def handle_api_request(self):
        try:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø—É—Ç—å API –∏–∑ URL
            api_path = self.path[5:]  # –£–±–∏—Ä–∞–µ–º '/api/'
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π URL –¥–ª—è API
            api_url = f"{API_BASE_URL}/{api_path.lstrip('/')}"
            
            print(f"–ü—Ä–æ–∫—Å–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞: {api_url}")
            
            # –°–æ–∑–¥–∞–µ–º –∑–∞–ø—Ä–æ—Å –∫ API
            req = urllib.request.Request(api_url)
            req.add_header('Authorization', f'Bearer {CLASH_ROYALE_API_TOKEN}')
            req.add_header('Content-Type', 'application/json')
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å
            with urllib.request.urlopen(req) as response:
                data = response.read()
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –∫–ª–∏–µ–Ω—Ç—É
                self.send_response(200)
                self.send_header('Content-Type', 'application/json')
                self.send_header('Access-Control-Allow-Origin', '*')
                self.send_header('Access-Control-Allow-Methods', 'GET, POST, OPTIONS')
                self.send_header('Access-Control-Allow-Headers', 'Content-Type, Authorization')
                self.end_headers()
                self.wfile.write(data)
                
        except HTTPError as e:
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ HTTP –æ—à–∏–±–æ–∫
            error_data = {
                'error': True,
                'message': f'HTTP Error {e.code}: {e.reason}',
                'status': e.code
            }
            
            self.send_response(e.code)
            self.send_header('Content-Type', 'application/json')
            self.send_header('Access-Control-Allow-Origin', '*')
            self.end_headers()
            self.wfile.write(json.dumps(error_data).encode())
            
        except URLError as e:
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ —Å–µ—Ç–∏
            error_data = {
                'error': True,
                'message': f'Network Error: {str(e.reason)}',
                'status': 500
            }
            
            self.send_response(500)
            self.send_header('Content-Type', 'application/json')
            self.send_header('Access-Control-Allow-Origin', '*')
            self.end_headers()
            self.wfile.write(json.dumps(error_data).encode())
            
        except Exception as e:
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥—Ä—É–≥–∏—Ö –æ—à–∏–±–æ–∫
            error_data = {
                'error': True,
                'message': f'Server Error: {str(e)}',
                'status': 500
            }
            
            self.send_response(500)
            self.send_header('Content-Type', 'application/json')
            self.send_header('Access-Control-Allow-Origin', '*')
            self.end_headers()
            self.wfile.write(json.dumps(error_data).encode())
    
    def do_OPTIONS(self):
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ preflight –∑–∞–ø—Ä–æ—Å–æ–≤ CORS
        self.send_response(200)
        self.send_header('Access-Control-Allow-Origin', '*')
        self.send_header('Access-Control-Allow-Methods', 'GET, POST, OPTIONS')
        self.send_header('Access-Control-Allow-Headers', 'Content-Type, Authorization')
        self.end_headers()

def run_server(port=8000):
    """–ó–∞–ø—É—Å–∫ –ø—Ä–æ–∫—Å–∏-—Å–µ—Ä–≤–µ—Ä–∞"""
    with socketserver.TCPServer(("", port), ClashRoyaleProxyHandler) as httpd:
        print(f"üöÄ –ü—Ä–æ–∫—Å–∏-—Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É {port}")
        print(f"üì° API Clash Royale –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ –∞–¥—Ä–µ—Å—É: http://localhost:{port}/api/")
        print(f"üåê –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã –¥–æ—Å—Ç—É–ø–Ω—ã –ø–æ –∞–¥—Ä–µ—Å—É: http://localhost:{port}/")
        print("–ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞")
        try:
            httpd.serve_forever()
        except KeyboardInterrupt:
            print("\nüõë –°–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

if __name__ == "__main__":
    run_server()
