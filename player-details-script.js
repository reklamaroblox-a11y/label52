// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è FACEIT API
const FACEIT_API_BASE = 'https://open.faceit.com/data/v4';
const FACEIT_API_KEY = '73782652-2cd5-405b-9c98-d28b2620bd0c'; // –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à API –∫–ª—é—á

// CORS –ø—Ä–æ–∫—Å–∏ –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
const CORS_PROXY = 'https://api.allorigins.win/raw?url=';

// –î–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
let playerData = {
    nickname: 'NICKNAME',
    name: '–ò–≥—Ä–æ–∫ LABEL 52',
    description: '–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –∏–≥—Ä–æ–∫ CS2',
    faceitNickname: ''
};

// –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∏–∫–Ω–µ–π–º–∞ –∏–∑ URL –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
function getNicknameFromUrl() {
    const urlParams = new URLSearchParams(window.location.search);
    const nickname = urlParams.get('nickname');
    if (nickname) {
        playerData.faceitNickname = decodeURIComponent(nickname);
        playerData.nickname = decodeURIComponent(nickname);
        playerData.name = decodeURIComponent(nickname);
    }
}

// –°–ø–∏—Å–æ–∫ –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
const KNOWN_PLAYERS = [
    'ZywOo',
    'sh1ro', 
    'ropz',
    'broky',
    'Twistzz',
    'EliGE',
    'NAF',
    'Stewie2K',
    'tarik',
    'coldzera'
];

// –ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
function loadPlayerData() {
    const saved = localStorage.getItem('playerData');
    if (saved) {
        playerData = { ...playerData, ...JSON.parse(saved) };
        updatePlayerInfo();
    }
}

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
function savePlayerData() {
    localStorage.setItem('playerData', JSON.stringify(playerData));
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏–≥—Ä–æ–∫–∞
function updatePlayerInfo() {
    document.querySelector('.player-name').textContent = playerData.name;
    document.querySelector('.player-description').textContent = playerData.description;
    
    if (playerData.faceitNickname) {
        document.getElementById('faceit-link').href = `https://www.faceit.com/ru/players/${playerData.faceitNickname}`;
    }
}

// FACEIT API —Ñ—É–Ω–∫—Ü–∏–∏
async function getPlayerStats(nickname) {
    try {
        console.log('üîç –ó–∞–ø—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∏–≥—Ä–æ–∫–∞:', nickname);
        console.log('üîë API –∫–ª—é—á:', FACEIT_API_KEY);
        
        if (!FACEIT_API_KEY || FACEIT_API_KEY === 'YOUR_API_KEY_HERE') {
            console.log('‚ùå API –∫–ª—é—á –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω, –¥–∞–Ω–Ω—ã–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã');
            showNotification('API –∫–ª—é—á –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω, –¥–∞–Ω–Ω—ã–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã!', 'warning');
            return await getEmptyPlayerStats(nickname);
        }
        
        // –°–Ω–∞—á–∞–ª–∞ –ø–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –∏–≥—Ä–æ–∫–∞ —á–µ—Ä–µ–∑ –ø–æ–∏—Å–∫
        const searchUrl = `${FACEIT_API_BASE}/search/players?nickname=${encodeURIComponent(nickname)}&game=cs2&offset=0&limit=1`;
        console.log('üîç –ü–æ–∏—Å–∫ –∏–≥—Ä–æ–∫–∞:', searchUrl);
        
        const searchResponse = await fetch(searchUrl, {
            method: 'GET',
            headers: {
                'Authorization': `Bearer ${FACEIT_API_KEY}`,
                'Content-Type': 'application/json',
                'Accept': 'application/json'
            },
            mode: 'cors'
        });
        
        console.log('üì° –°—Ç–∞—Ç—É—Å –ø–æ–∏—Å–∫–∞:', searchResponse.status);
        
        let playerData;
        if (searchResponse.ok) {
            const searchData = await searchResponse.json();
            console.log('üîç –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞:', searchData);
            
            if (searchData.items && searchData.items.length > 0) {
                // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ –∏–≥—Ä–æ–∫–∞
                playerData = searchData.items[0];
                console.log('‚úÖ –ò–≥—Ä–æ–∫ –Ω–∞–π–¥–µ–Ω —á–µ—Ä–µ–∑ –ø–æ–∏—Å–∫:', playerData);
            } else {
                throw new Error('–ò–≥—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–æ–∏—Å–∫–µ');
            }
        } else {
            // –ï—Å–ª–∏ –ø–æ–∏—Å–∫ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –ø—Ä–æ–±—É–µ–º –ø—Ä—è–º–æ–π –∑–∞–ø—Ä–æ—Å
            const playerUrl = `${FACEIT_API_BASE}/players/${nickname}`;
            console.log('üåê –ü—Ä—è–º–æ–π –∑–∞–ø—Ä–æ—Å –∫:', playerUrl);
            
            const response = await fetch(playerUrl, {
                method: 'GET',
                headers: {
                    'Authorization': `Bearer ${FACEIT_API_KEY}`,
                    'Content-Type': 'application/json',
                    'Accept': 'application/json'
                },
                mode: 'cors'
            });
            
            console.log('üì° –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞:', response.status);
            
            if (!response.ok) {
                const errorText = await response.text();
                console.error('‚ùå –û—à–∏–±–∫–∞ API:', errorText);
                throw new Error(`HTTP error! status: ${response.status}, message: ${errorText}`);
            }
            
            playerData = await response.json();
            console.log('‚úÖ –î–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–∞ –ø–æ–ª—É—á–µ–Ω—ã:', playerData);
        }
        
        // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É CS2
        const statsUrl = `${FACEIT_API_BASE}/players/${playerData.player_id}/stats/cs2`;
        console.log('üåê –ó–∞–ø—Ä–æ—Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', statsUrl);
        
        const statsResponse = await fetch(statsUrl, {
            method: 'GET',
            headers: {
                'Authorization': `Bearer ${FACEIT_API_KEY}`,
                'Content-Type': 'application/json',
                'Accept': 'application/json'
            },
            mode: 'cors'
        });
        
        console.log('üì° –°—Ç–∞—Ç—É—Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', statsResponse.status);
        
        if (statsResponse.ok) {
            const statsData = await statsResponse.json();
            console.log('‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—É—á–µ–Ω–∞:', statsData);
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö –∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ –∏–∑–≤–ª–µ–∫–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è
            const cs2Data = playerData.games?.cs2 || {};
            const lifetimeStats = statsData.lifetime || {};
            
            // –û–±—ä–µ–¥–∏–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–∞ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            const combinedStats = {
                ...playerData,
                games: {
                    cs2: {
                        skill_level: cs2Data.skill_level || 0,
                        elo: cs2Data.faceit_elo || 0,
                        game_player_id: cs2Data.game_player_id || ''
                    }
                },
                games_count: lifetimeStats.Matches || 0,
                wins: lifetimeStats.Wins || 0,
                accuracy: lifetimeStats['Average Headshots %'] || 0,
                win_streak: lifetimeStats['Current Win Streak'] || 0
            };
            
            showNotification('–ó–∞–≥—Ä—É–∂–µ–Ω—ã —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ FACEIT!', 'success');
            return combinedStats;
        } else {
            const errorText = await statsResponse.text();
            console.error('‚ùå –û—à–∏–±–∫–∞ API —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', errorText);
            throw new Error(`HTTP error! status: ${statsResponse.status}, message: ${errorText}`);
        }
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–≥—Ä–æ–∫–∞:', error);
        showNotification(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö: ${error.message}. –î–∞–Ω–Ω—ã–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã.`, 'error');
        console.log('üîÑ –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç—ã–µ –¥–∞–Ω–Ω—ã–µ');
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
        return await getEmptyPlayerStats(nickname);
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö
async function getEmptyPlayerStats(nickname) {
    console.log('üì≠ –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∏–≥—Ä–æ–∫–∞:', nickname);
    // –ò–º–∏—Ç–∞—Ü–∏—è –∑–∞–¥–µ—Ä–∂–∫–∏ API
    await new Promise(resolve => setTimeout(resolve, 500));
    
    const emptyData = {
        player_id: null,
        nickname: nickname,
        games: {
            cs2: {
                skill_level: 0,
                elo: 0,
                game_player_id: ''
            }
        },
        games_count: 0,
        wins: 0,
        accuracy: 0,
        win_streak: 0,
        isEmpty: true // –§–ª–∞–≥ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø—É—Å—Ç—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    };
    
    console.log('üì≠ –ü—É—Å—Ç—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–æ–∑–¥–∞–Ω—ã:', emptyData);
    return emptyData;
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –º–∞—Ç—á–µ–π
async function getPlayerMatches(playerId, offset = 0, limit = 20) {
    try {
        console.log('üéÆ –ó–∞–ø—Ä–æ—Å –º–∞—Ç—á–µ–π –¥–ª—è –∏–≥—Ä–æ–∫–∞:', playerId);
        
        if (!FACEIT_API_KEY || FACEIT_API_KEY === 'YOUR_API_KEY_HERE') {
            console.log('‚ùå API –∫–ª—é—á –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω, –¥–∞–Ω–Ω—ã–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã');
            showNotification('API –∫–ª—é—á –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω, –¥–∞–Ω–Ω—ã–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã!', 'warning');
            return [];
        }
        
        // –ü–æ–ª—É—á–∞–µ–º –º–∞—Ç—á–∏ —á–µ—Ä–µ–∑ FACEIT API
        const matchesUrl = `${FACEIT_API_BASE}/players/${playerId}/history?game=cs2&offset=${offset}&limit=${limit}`;
        console.log('üåê –ó–∞–ø—Ä–æ—Å –º–∞—Ç—á–µ–π:', matchesUrl);
        
        const response = await fetch(matchesUrl, {
            method: 'GET',
            headers: {
                'Authorization': `Bearer ${FACEIT_API_KEY}`,
                'Content-Type': 'application/json',
                'Accept': 'application/json'
            },
            mode: 'cors'
        });
        
        console.log('üì° –°—Ç–∞—Ç—É—Å –º–∞—Ç—á–µ–π:', response.status);
        
        if (!response.ok) {
            const errorText = await response.text();
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–∞—Ç—á–µ–π:', errorText);
            throw new Error(`HTTP error! status: ${response.status}, message: ${errorText}`);
        }
        
        const matchesData = await response.json();
        console.log('‚úÖ –ú–∞—Ç—á–∏ –ø–æ–ª—É—á–µ–Ω—ã:', matchesData);
        showNotification('–ó–∞–≥—Ä—É–∂–µ–Ω—ã —Ä–µ–∞–ª—å–Ω—ã–µ –º–∞—Ç—á–∏ –∏–∑ FACEIT!', 'success');
        return matchesData.items || [];
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–∞—Ç—á–µ–π:', error);
        showNotification(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–∞—Ç—á–µ–π: ${error.message}. –î–∞–Ω–Ω—ã–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã.`, 'error');
        console.log('üîÑ –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ –º–∞—Ç—á–µ–π');
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
        return [];
    }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
function updateStats(stats) {
    if (!stats) return;
    
    const eloValue = document.getElementById('elo-value');
    const levelValue = document.getElementById('level-value');
    const matchesValue = document.getElementById('matches-value');
    const winsValue = document.getElementById('wins-value');
    const winRate = document.getElementById('win-rate');
    const accuracy = document.getElementById('accuracy');
    const winStreak = document.getElementById('win-streak');
    
    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ CS2 –∏–∑ games –æ–±—ä–µ–∫—Ç–∞
    const cs2Data = stats.games?.cs2;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–∞–Ω–Ω—ã–µ
    if (stats.isEmpty) {
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º "–ø—É—Å—Ç–æ" –¥–ª—è –≤—Å–µ—Ö –∑–Ω–∞—á–µ–Ω–∏–π
        eloValue.textContent = '–ø—É—Å—Ç–æ';
        levelValue.innerHTML = '<span class="level-badge level-0">-</span>';
        matchesValue.textContent = '–ø—É—Å—Ç–æ';
        winsValue.textContent = '–ø—É—Å—Ç–æ';
        winRate.textContent = '–ø—É—Å—Ç–æ';
        accuracy.textContent = '–ø—É—Å—Ç–æ';
        winStreak.textContent = '–ø—É—Å—Ç–æ';
    } else {
        // –ê–Ω–∏–º–∞—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–Ω–∞—á–µ–Ω–∏–π
        animateValueChange(eloValue, cs2Data?.elo || 0);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –±–µ–π–¥–∂ —É—Ä–æ–≤–Ω—è
        const skillLevel = cs2Data?.skill_level || 0;
        levelValue.innerHTML = `<span class="level-badge level-${skillLevel}">${skillLevel}</span>`;
        
        animateValueChange(matchesValue, stats.games_count || 0);
        animateValueChange(winsValue, stats.wins || 0);
        
        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤ –∏ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–π
        const winPercentage = stats.games_count ? Math.round((stats.wins / stats.games_count) * 100) : 0;
        winRate.textContent = `${winPercentage}%`;
        accuracy.textContent = `${stats.accuracy || 0}%`;
        winStreak.textContent = stats.win_streak || 0;
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ FACEIT –ø—Ä–æ—Ñ–∏–ª—å
    if (stats.nickname) {
        document.getElementById('faceit-link').href = `https://www.faceit.com/ru/players/${stats.nickname}`;
    }
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –¥–∞–Ω–Ω—ã—Ö
    if (stats.isEmpty) {
        showNotification('üì≠ –î–∞–Ω–Ω—ã–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã –¥–ª—è —ç—Ç–æ–≥–æ –∏–≥—Ä–æ–∫–∞', 'warning');
    } else {
        showNotification('‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω—ã —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ FACEIT!', 'success');
    }
}

// –ê–Ω–∏–º–∞—Ü–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –∑–Ω–∞—á–µ–Ω–∏–π
function animateValueChange(element, newValue) {
    const currentValue = parseInt(element.textContent) || 0;
    const difference = newValue - currentValue;
    const steps = 20;
    const stepValue = difference / steps;
    let currentStep = 0;
    
    element.classList.add('updating');
    
    const interval = setInterval(() => {
        currentStep++;
        const displayValue = Math.round(currentValue + (stepValue * currentStep));
        element.textContent = displayValue;
        
        if (currentStep >= steps) {
            element.textContent = newValue;
            element.classList.remove('updating');
            clearInterval(interval);
        }
    }, 25);
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –º–∞—Ç—á–µ–π
function updateMatchesList(matches, currentPlayerId) {
    const matchesList = document.getElementById('matches-list');
    
    if (!matches || matches.length === 0) {
        matchesList.innerHTML = '<div class="no-matches">–ø—É—Å—Ç–æ</div>';
        return;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–∞–Ω–Ω—ã–µ
    if (matches.length === 0) {
        showNotification('üì≠ –ò—Å—Ç–æ—Ä–∏—è –º–∞—Ç—á–µ–π –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞', 'warning');
    }
    
    matchesList.innerHTML = matches.map(match => {
        let isWin = false;
        let playerFaction = '';
        
        // Determine which faction the current player belongs to
        if (match.teams.faction1.players.some(p => p.player_id === currentPlayerId)) {
            playerFaction = 'faction1';
        } else if (match.teams.faction2.players.some(p => p.player_id === currentPlayerId)) {
            playerFaction = 'faction2';
        }
        
        if (playerFaction && match.results.winner === playerFaction) {
            isWin = true;
        }
        
        const matchDate = new Date(match.started_at * 1000).toLocaleDateString('ru-RU', {
            year: 'numeric',
            month: 'short',
            day: 'numeric'
        });
        
        const matchResultText = isWin ? '–ü–æ–±–µ–¥–∞' : '–ü–æ—Ä–∞–∂–µ–Ω–∏–µ';
        const matchResultClass = isWin ? 'win' : 'loss';
        
        return `
            <div class="match-item">
                <div class="match-info">
                    <div class="match-result ${matchResultClass}">
                        ${isWin ? 'W' : 'L'}
                    </div>
                    <div class="match-details">
                        <span class="match-type">${match.game_mode}</span>
                        <span class="match-date">${matchDate}</span>
                        <span class="match-competition">${match.competition_name}</span>
                    </div>
                </div>
                <div class="match-score">
                    <span class="score-faction1">${match.results.score.faction1}</span> - <span class="score-faction2">${match.results.score.faction2}</span>
                </div>
                <div class="match-elo-change">
                    <!-- ELO change is not directly available in match history API -->
                    <span class="elo-placeholder">N/A</span>
                </div>
                <a href="${match.faceit_url.replace('{lang}', 'ru')}" target="_blank" class="match-link">
                    <i class="fas fa-external-link-alt"></i>
                </a>
            </div>
        `;
    }).join('');
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö
async function loadPlayerStats() {
    if (!playerData.faceitNickname) {
        console.log('FACEIT –Ω–∏–∫–Ω–µ–π–º –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω');
        return;
    }
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É
    document.body.classList.add('loading');
    
    try {
        // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–≥—Ä–æ–∫–∞
        const stats = await getPlayerStats(playerData.faceitNickname);
        if (stats) {
            updateStats(stats);
            
            // –ü–æ–ª—É—á–∞–µ–º –º–∞—Ç—á–∏ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å player_id
            if (stats.player_id) {
                const matches = await getPlayerMatches(stats.player_id);
                updateMatchesList(matches, stats.player_id);
            } else {
                // –ï—Å–ª–∏ –Ω–µ—Ç player_id, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ –º–∞—Ç—á–µ–π
                updateMatchesList([], null);
            }
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö:', error);
    } finally {
        document.body.classList.remove('loading');
    }
}

// –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
function startAutoUpdate() {
    setInterval(() => {
        if (playerData.faceitNickname) {
            loadPlayerStats();
        }
    }, 5 * 60 * 1000); // 5 –º–∏–Ω—É—Ç
}

// –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–∫
function initSettingsModal() {
    const modal = document.getElementById('settings-modal');
    const settingsBtn = document.getElementById('settings-btn');
    const modalClose = document.getElementById('modal-close');
    const saveBtn = document.getElementById('save-settings');
    
    // –û—Ç–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
    settingsBtn.addEventListener('click', () => {
        document.getElementById('faceit-nickname').value = playerData.faceitNickname;
        modal.classList.add('active');
    });
    
    // –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
    modalClose.addEventListener('click', () => {
        modal.classList.remove('active');
    });
    
    // –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ –∫–ª–∏–∫—É –≤–Ω–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
    modal.addEventListener('click', (e) => {
        if (e.target === modal) {
            modal.classList.remove('active');
        }
    });
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–∫–æ–≤ –ø–æ –ø–æ–¥—Å–∫–∞–∑–∫–∞–º
    document.querySelectorAll('.hint-tag').forEach(tag => {
        tag.addEventListener('click', () => {
            const nickname = tag.getAttribute('data-nickname');
            document.getElementById('faceit-nickname').value = nickname;
            showNotification(`–í—ã–±—Ä–∞–Ω –∏–≥—Ä–æ–∫: ${nickname}`);
        });
    });
    
    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫
    saveBtn.addEventListener('click', () => {
        playerData.faceitNickname = document.getElementById('faceit-nickname').value;
        
        savePlayerData();
        updatePlayerInfo();
        
        if (playerData.faceitNickname) {
            loadPlayerStats();
        }
        
        modal.classList.remove('active');
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        showNotification('–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!');
    });
}

// –ü–æ–∫–∞–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
function showNotification(message, type = 'info') {
    const notification = document.createElement('div');
    notification.className = 'notification';
    notification.textContent = message;
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–≤–µ—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    let backgroundColor;
    switch (type) {
        case 'success':
            backgroundColor = 'linear-gradient(135deg, #4CAF50, #45a049)';
            break;
        case 'error':
            backgroundColor = 'linear-gradient(135deg, #f44336, #d32f2f)';
            break;
        case 'warning':
            backgroundColor = 'linear-gradient(135deg, #ff9800, #f57c00)';
            break;
        default:
            backgroundColor = 'var(--gradient-primary)';
    }
    
    notification.style.cssText = `
        position: fixed;
        top: 20px;
        right: 20px;
        background: ${backgroundColor};
        color: white;
        padding: 1rem 2rem;
        border-radius: 10px;
        z-index: 3000;
        animation: slideIn 0.3s ease;
        box-shadow: 0 4px 15px rgba(0, 0, 0, 0.2);
    `;
    
    document.body.appendChild(notification);
    
    setTimeout(() => {
        notification.style.animation = 'slideOut 0.3s ease';
        setTimeout(() => {
            document.body.removeChild(notification);
        }, 300);
    }, 3000);
}

// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ CSS –∞–Ω–∏–º–∞—Ü–∏–π –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
const notificationStyles = document.createElement('style');
notificationStyles.textContent = `
    @keyframes slideIn {
        from { transform: translateX(100%); opacity: 0; }
        to { transform: translateX(0); opacity: 1; }
    }
    @keyframes slideOut {
        from { transform: translateX(0); opacity: 1; }
        to { transform: translateX(100%); opacity: 0; }
    }
`;
document.head.appendChild(notificationStyles);

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
document.addEventListener('DOMContentLoaded', () => {
    getNicknameFromUrl(); // –ü–æ–ª—É—á–∞–µ–º –Ω–∏–∫–Ω–µ–π–º –∏–∑ URL
    loadPlayerData();
    initSettingsModal();
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –µ—Å–ª–∏ –µ—Å—Ç—å –Ω–∏–∫–Ω–µ–π–º
    if (playerData.faceitNickname) {
        loadPlayerStats();
    }
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
    startAutoUpdate();
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    if (!playerData.faceitNickname) {
        setTimeout(() => {
            showNotification('–ù–∞–∂–º–∏—Ç–µ –Ω–∞ —à–µ—Å—Ç–µ—Ä–µ–Ω–∫—É –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è');
        }, 2000);
    }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
window.addEventListener('error', (e) => {
    console.error('–û—à–∏–±–∫–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –¥–µ—Ç–∞–ª–µ–π –∏–≥—Ä–æ–∫–∞:', e.error);
});

// –≠–∫—Å–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–π –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
window.PlayerDetails = {
    loadPlayerStats,
    updateStats,
    updateMatchesList,
    showNotification
};
